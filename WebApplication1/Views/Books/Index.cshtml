@model IEnumerable<WebApplication1.Models.Book>
@{
    ViewBag.Title = "Browse Books - Oluntunji Books";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="container-fluid py-5">
    <!-- Hero Section -->
    <div class="row mb-5">
        <div class="col-12">
            <div class="hero-section bg-gradient-primary text-white rounded-3 p-5 mb-4">
                <div class="row align-items-center">
                    <div class="col-lg-8">
                        <h1 class="display-4 fw-bold mb-3">
                            <i class="fas fa-book-open me-3"></i>
                            Discover Amazing Books
                        </h1>
                        <p class="lead mb-4">
                            Explore our curated collection of books across various categories. 
                            From fiction to academic texts, find your next great read at Oluntunji Books.
                        </p>
                        <div class="d-flex flex-wrap gap-2">
                            <span class="badge bg-light text-dark fs-6 px-3 py-2">üìö @ViewBag.TotalBooks Books Available</span>
                            <span class="badge bg-light text-dark fs-6 px-3 py-2">üè∑Ô∏è @ViewBag.Categories.Count Categories</span>
                            <span class="badge bg-light text-dark fs-6 px-3 py-2">‚≠ê Quality Guaranteed</span>
                        </div>
                    </div>
                    <div class="col-lg-4 text-center">
                        <div class="hero-image">
                            <i class="fas fa-book-reader fa-8x opacity-75"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Search and Filter Section -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card shadow-sm border-0">
                <div class="card-body p-4">
                    <div class="row g-3">
                        <div class="col-lg-6">
                            <div class="input-group">
                                <span class="input-group-text bg-light border-0">
                                    <i class="fas fa-search text-muted"></i>
                                </span>
                                <input type="text" id="searchInput" class="form-control border-0 bg-light" 
                                       placeholder="Search by title, author, or ISBN..." 
                                       value="@ViewBag.SearchTerm">
                            </div>
                        </div>
                        <div class="col-lg-3">
                            <select id="categoryFilter" class="form-select border-0 bg-light">
                                <option value="">All Categories</option>
                                @foreach (var category in ViewBag.Categories)
                                {
                                    <option value="@category" @(ViewBag.SelectedCategory == category ? "selected" : "")>
                                        @category
                                    </option>
                                }
                            </select>
                        </div>
                        <div class="col-lg-3">
                            <select id="sortOrder" class="form-select border-0 bg-light">
                                <option value="title_asc" @(ViewBag.SortOrder == "title_asc" ? "selected" : "")>
                                    Title A-Z
                                </option>
                                <option value="title_desc" @(ViewBag.SortOrder == "title_desc" ? "selected" : "")>
                                    Title Z-A
                                </option>
                                <option value="price_asc" @(ViewBag.SortOrder == "price_asc" ? "selected" : "")>
                                    Price: Low to High
                                </option>
                                <option value="price_desc" @(ViewBag.SortOrder == "price_desc" ? "selected" : "")>
                                    Price: High to Low
                                </option>
                                <option value="newest" @(ViewBag.SortOrder == "newest" ? "selected" : "")>
                                    Newest First
                                </option>
                            </select>
                        </div>
                    </div>
                    <div class="row mt-3">
                        <div class="col-12">
                            <div class="d-flex flex-wrap gap-2">
                                <button type="button" class="btn btn-outline-primary btn-sm" onclick="clearFilters()">
                                    <i class="fas fa-times me-1"></i>Clear Filters
                                </button>
                                <button type="button" class="btn btn-outline-success btn-sm" onclick="showOnlyAvailable()">
                                    <i class="fas fa-check-circle me-1"></i>In Stock Only
                                </button>
                                <button type="button" class="btn btn-outline-warning btn-sm" onclick="showFeatured()">
                                    <i class="fas fa-star me-1"></i>Featured Books
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Results Summary -->
    <div class="row mb-3">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center">
                <h5 class="mb-0">
                    <span id="resultsCount">@Model.Count()</span> Books Found
                </h5>
                <div class="btn-group" role="group">
                    <button type="button" class="btn btn-outline-secondary btn-sm" id="gridView" title="Grid View">
                        <i class="fas fa-th"></i>
                    </button>
                    <button type="button" class="btn btn-outline-secondary btn-sm" id="listView" title="List View">
                        <i class="fas fa-list"></i>
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Books Grid -->
    <div class="row" id="booksContainer">
        @foreach (var book in Model)
        {
            <div class="col-lg-3 col-md-4 col-sm-6 mb-4 book-item" 
                 data-category="@book.Category" 
                 data-available="@book.IsAvailable.ToString().ToLower()"
                 data-featured="@book.IsFeatured.ToString().ToLower()">
                <div class="card h-100 shadow-sm border-0 book-card">
                    <div class="position-relative">
                        @if (!string.IsNullOrEmpty(book.CoverImageUrl))
                        {
                            <img src="@book.CoverImageUrl" class="card-img-top" alt="@book.Title" 
                                 style="height: 250px; object-fit: cover;" onerror="this.src='https://via.placeholder.com/250x350?text=No+Image'">
                        }
                        else
                        {
                            <img src="https://via.placeholder.com/250x350?text=No+Image" class="card-img-top" alt="@book.Title" 
                                 style="height: 250px; object-fit: cover;">
                        }
                        
                        @if (book.IsFeatured)
                        {
                            <span class="position-absolute top-0 start-0 m-2 badge bg-warning text-dark">
                                <i class="fas fa-star me-1"></i>Featured
                            </span>
                        }
                        
                        @if (!book.IsAvailable)
                        {
                            <div class="position-absolute top-0 start-0 w-100 h-100 d-flex align-items-center justify-content-center"
                                 style="background-color: rgba(0,0,0,0.7);">
                                <span class="badge bg-danger fs-6">Out of Stock</span>
                            </div>
                        }
                    </div>
                    
                    <div class="card-body d-flex flex-column">
                        <div class="mb-2">
                            <span class="badge bg-light text-dark small">@book.Category</span>
                            @if (!string.IsNullOrEmpty(book.Genre))
                            {
                                <span class="badge bg-light text-dark small">@book.Genre</span>
                            }
                        </div>
                        
                        <h5 class="card-title fw-bold text-truncate" title="@book.Title">@book.Title</h5>
                        <p class="card-text text-muted small mb-2">by @book.Author</p>
                        
                        @if (!string.IsNullOrEmpty(book.Description))
                        {
                            <p class="card-text small text-muted mb-3" style="display: -webkit-box; -webkit-line-clamp: 3; -webkit-box-orient: vertical; overflow: hidden;">
                                @book.Description
                            </p>
                        }
                        
                        <div class="mt-auto">
                            <div class="d-flex justify-content-between align-items-center mb-3">
                                <span class="h5 mb-0 text-primary fw-bold">R @book.Price.ToString("0.00")</span>
                                @if (book.StockQuantity <= 5 && book.IsAvailable)
                                {
                                    <small class="text-warning">
                                        <i class="fas fa-exclamation-triangle me-1"></i>Only @book.StockQuantity left
                                    </small>
                                }
                            </div>
                            
                            <div class="d-grid gap-2">
                                <a href="@Url.Action("Details", "Books", new { id = book.BookId })" 
                                   class="btn btn-primary btn-sm">
                                    <i class="fas fa-info-circle me-1"></i>View Details
                                </a>
                                
                                @if (book.IsAvailable)
                                {
                                    <button type="button" class="btn btn-outline-success btn-sm add-to-cart" 
                                            data-book-id="@book.BookId" data-book-title="@book.Title">
                                        <i class="fas fa-cart-plus me-1"></i>Add to Cart
                                    </button>
                                }
                                else
                                {
                                    <button type="button" class="btn btn-outline-secondary btn-sm" disabled>
                                        <i class="fas fa-times-circle me-1"></i>Out of Stock
                                    </button>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>

    <!-- No Results Message -->
    <div class="row" id="noResults" style="display: none;">
        <div class="col-12 text-center py-5">
            <div class="text-muted">
                <i class="fas fa-search fa-4x mb-3"></i>
                <h4>No books found</h4>
                <p>Try adjusting your search criteria or filters.</p>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function() {
            // Search functionality
            let searchTimeout;
            $('#searchInput').on('input', function() {
                clearTimeout(searchTimeout);
                searchTimeout = setTimeout(function() {
                    filterBooks();
                }, 300);
            });

            // Filter functionality
            $('#categoryFilter, #sortOrder').on('change', function() {
                filterBooks();
            });

            // Add to cart functionality
            $('.add-to-cart').click(function() {
                const bookId = $(this).data('book-id');
                const bookTitle = $(this).data('book-title');
                
                // Simulate adding to cart
                $(this).html('<i class="fas fa-check me-1"></i>Added!').removeClass('btn-outline-success').addClass('btn-success');
                
                setTimeout(() => {
                    $(this).html('<i class="fas fa-cart-plus me-1"></i>Add to Cart').removeClass('btn-success').addClass('btn-outline-success');
                }, 2000);

                // Show toast notification
                showToast('Success', `"${bookTitle}" has been added to your cart.`, 'success');
            });

            // View toggle
            $('#gridView').click(function() {
                $('#booksContainer').removeClass('list-view').addClass('grid-view');
                $(this).addClass('active').siblings().removeClass('active');
            });

            $('#listView').click(function() {
                $('#booksContainer').removeClass('grid-view').addClass('list-view');
                $(this).addClass('active').siblings().removeClass('active');
            });

            // Initialize grid view
            $('#gridView').addClass('active');
        });

        function filterBooks() {
            const searchTerm = $('#searchInput').val().toLowerCase();
            const category = $('#categoryFilter').val();
            const sortOrder = $('#sortOrder').val();
            
            $('.book-item').each(function() {
                const $item = $(this);
                const title = $item.find('.card-title').text().toLowerCase();
                const author = $item.find('.card-text').text().toLowerCase();
                const itemCategory = $item.data('category').toLowerCase();
                
                let show = true;
                
                // Search filter
                if (searchTerm && !title.includes(searchTerm) && !author.includes(searchTerm)) {
                    show = false;
                }
                
                // Category filter
                if (category && itemCategory !== category.toLowerCase()) {
                    show = false;
                }
                
                if (show) {
                    $item.show();
                } else {
                    $item.hide();
                }
            });
            
            updateResultsCount();
        }

        function clearFilters() {
            $('#searchInput').val('');
            $('#categoryFilter').val('');
            $('#sortOrder').val('title_asc');
            $('.book-item').show();
            updateResultsCount();
        }

        function showOnlyAvailable() {
            $('.book-item').each(function() {
                const $item = $(this);
                if ($item.data('available') === true) {
                    $item.show();
                } else {
                    $item.hide();
                }
            });
            updateResultsCount();
        }

        function showFeatured() {
            $('.book-item').each(function() {
                const $item = $(this);
                if ($item.data('featured') === true) {
                    $item.show();
                } else {
                    $item.hide();
                }
            });
            updateResultsCount();
        }

        function updateResultsCount() {
            const visibleCount = $('.book-item:visible').length;
            $('#resultsCount').text(visibleCount);
            
            if (visibleCount === 0) {
                $('#noResults').show();
            } else {
                $('#noResults').hide();
            }
        }

        function showToast(title, message, type = 'info') {
            // Create toast element
            const toastHtml = `
                <div class="toast align-items-center text-white bg-${type === 'success' ? 'success' : 'primary'} border-0" role="alert">
                    <div class="d-flex">
                        <div class="toast-body">
                            <strong>${title}</strong><br>${message}
                        </div>
                        <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
                    </div>
                </div>
            `;
            
            // Add to toast container
            $('#toastContainer').append(toastHtml);
            
            // Show toast
            const toast = new bootstrap.Toast($('#toastContainer .toast').last()[0]);
            toast.show();
            
            // Remove after hidden
            $('#toastContainer .toast').last().on('hidden.bs.toast', function() {
                $(this).remove();
            });
        }
    </script>
    
    <style>
        .hero-section {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        }
        
        .book-card {
            transition: transform 0.3s ease, box-shadow 0.3s ease;
            border-radius: 15px;
            overflow: hidden;
        }
        
        .book-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 30px rgba(0,0,0,0.15) !important;
        }
        
        .book-card .card-img-top {
            border-bottom: 1px solid #eee;
        }
        
        .list-view .book-item {
            flex: 0 0 100% !important;
            max-width: 100% !important;
        }
        
        .list-view .book-card {
            flex-direction: row;
        }
        
        .list-view .card-img-top {
            width: 200px;
            height: 250px !important;
            border-bottom: none;
            border-right: 1px solid #eee;
        }
        
        .bg-gradient-primary {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        }
        
        .toast-container {
            position: fixed;
            top: 20px;
            right: 20px;
            z-index: 1050;
        }
    </style>
}

<!-- Toast Container -->
<div id="toastContainer" class="toast-container"></div>