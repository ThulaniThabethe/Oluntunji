@model WebApplication1.Models.Book

@{
    ViewBag.Title = "Edit Book";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="container-fluid py-4">
    <div class="row">
        <div class="col-12">
            <div class="card shadow-sm">
                <div class="card-header bg-warning text-dark">
                    <div class="d-flex justify-content-between align-items-center">
                        <h4 class="mb-0">
                            <i class="fas fa-edit me-2"></i>Edit Book
                        </h4>
                        <div>
                            <a href="@Url.Action("BookList", "Books")" class="btn btn-outline-secondary btn-sm me-2">
                                <i class="fas fa-arrow-left me-1"></i>Back to List
                            </a>
                            <a href="@Url.Action("BookDetails", "Books", new { id = Model.BookId })" class="btn btn-outline-info btn-sm">
                                <i class="fas fa-eye me-1"></i>View Details
                            </a>
                        </div>
                    </div>
                </div>
                <div class="card-body">
                    @using (Html.BeginForm("EditBook", "Books", FormMethod.Post, new { @class = "needs-validation", enctype = "multipart/form-data", id = "editBookForm" }))
                    {
                        @Html.AntiForgeryToken()
                        @Html.HiddenFor(model => model.BookId)
                        @Html.HiddenFor(model => model.CreatedDate)
                        @Html.HiddenFor(model => model.SellerId)

                        @Html.ValidationSummary(true, "", new { @class = "alert alert-danger alert-dismissible fade show" })

                        <div class="row">
                            <!-- Basic Information -->
                            <div class="col-md-8">
                                <div class="card mb-4">
                                    <div class="card-header">
                                        <h5 class="mb-0">
                                            <i class="fas fa-info-circle me-2"></i>Basic Information
                                        </h5>
                                    </div>
                                    <div class="card-body">
                                        <div class="row">
                                            <div class="col-md-9">
                                                <div class="mb-3">
                                                    @Html.LabelFor(model => model.Title, htmlAttributes: new { @class = "form-label" })
                                                    @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control", placeholder = "Enter book title" } })
                                                    @Html.ValidationMessageFor(model => model.Title, "", new { @class = "invalid-feedback d-block" })
                                                </div>
                                            </div>
                                            <div class="col-md-3">
                                                <div class="mb-3">
                                                    @Html.LabelFor(model => model.PublicationYear, htmlAttributes: new { @class = "form-label" })
                                                    @Html.EditorFor(model => model.PublicationYear, new { htmlAttributes = new { @class = "form-control", placeholder = "YYYY" } })
                                                    @Html.ValidationMessageFor(model => model.PublicationYear, "", new { @class = "invalid-feedback d-block" })
                                                </div>
                                            </div>
                                        </div>

                                        <div class="row">
                                            <div class="col-md-6">
                                                <div class="mb-3">
                                                    @Html.LabelFor(model => model.Author, htmlAttributes: new { @class = "form-label" })
                                                    @Html.EditorFor(model => model.Author, new { htmlAttributes = new { @class = "form-control", placeholder = "Enter author name" } })
                                                    @Html.ValidationMessageFor(model => model.Author, "", new { @class = "invalid-feedback d-block" })
                                                </div>
                                            </div>
                                            <div class="col-md-6">
                                                <div class="mb-3">
                                                    @Html.LabelFor(model => model.Publisher, htmlAttributes: new { @class = "form-label" })
                                                    @Html.EditorFor(model => model.Publisher, new { htmlAttributes = new { @class = "form-control", placeholder = "Enter publisher name" } })
                                                    @Html.ValidationMessageFor(model => model.Publisher, "", new { @class = "invalid-feedback d-block" })
                                                </div>
                                            </div>
                                        </div>

                                        <div class="row">
                                            <div class="col-md-6">
                                                <div class="mb-3">
                                                    @Html.LabelFor(model => model.Category, htmlAttributes: new { @class = "form-label" })
                                                    @Html.DropDownListFor(model => model.Category, new SelectList(new[] {
                                                        WebApplication1.Models.BookCategory.Fiction,
                                                        WebApplication1.Models.BookCategory.NonFiction,
                                                        WebApplication1.Models.BookCategory.Children,
                                                        WebApplication1.Models.BookCategory.Educational,
                                                        WebApplication1.Models.BookCategory.Business,
                                                        WebApplication1.Models.BookCategory.Technology,
                                                        WebApplication1.Models.BookCategory.Health,
                                                        WebApplication1.Models.BookCategory.History,
                                                        WebApplication1.Models.BookCategory.Science,
                                                        WebApplication1.Models.BookCategory.Art,
                                                        WebApplication1.Models.BookCategory.Religion,
                                                        WebApplication1.Models.BookCategory.Biography
                                                    }), "Select Category", new { @class = "form-select" })
                                                    @Html.ValidationMessageFor(model => model.Category, "", new { @class = "invalid-feedback d-block" })
                                                </div>
                                            </div>
                                            <div class="col-md-6">
                                                <div class="mb-3">
                                                    @Html.LabelFor(model => model.Genre, htmlAttributes: new { @class = "form-label" })
                                                    @Html.EditorFor(model => model.Genre, new { htmlAttributes = new { @class = "form-control", placeholder = "Enter genre" } })
                                                    @Html.ValidationMessageFor(model => model.Genre, "", new { @class = "invalid-feedback d-block" })
                                                </div>
                                            </div>
                                        </div>

                                        <div class="mb-3">
                                            @Html.LabelFor(model => model.ISBN, htmlAttributes: new { @class = "form-label" })
                                            @Html.EditorFor(model => model.ISBN, new { htmlAttributes = new { @class = "form-control", placeholder = "Enter ISBN number" } })
                                            @Html.ValidationMessageFor(model => model.ISBN, "", new { @class = "invalid-feedback d-block" })
                                        </div>

                                        <div class="mb-3">
                                            @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "form-label" })
                                            @Html.TextAreaFor(model => model.Description, new { @class = "form-control", rows = "4", placeholder = "Enter book description" })
                                            @Html.ValidationMessageFor(model => model.Description, "", new { @class = "invalid-feedback d-block" })
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <!-- Pricing & Stock -->
                            <div class="col-md-4">
                                <div class="card mb-4">
                                    <div class="card-header">
                                        <h5 class="mb-0">
                                            <i class="fas fa-tags me-2"></i>Pricing & Stock
                                        </h5>
                                    </div>
                                    <div class="card-body">
                                        <div class="mb-3">
                                            @Html.LabelFor(model => model.Price, htmlAttributes: new { @class = "form-label" })
                                            <div class="input-group">
                                                <span class="input-group-text">R</span>
                                                @Html.EditorFor(model => model.Price, new { htmlAttributes = new { @class = "form-control", placeholder = "0.00" } })
                                            </div>
                                            @Html.ValidationMessageFor(model => model.Price, "", new { @class = "invalid-feedback d-block" })
                                        </div>

                                        <div class="mb-3">
                                            @Html.LabelFor(model => model.StockQuantity, htmlAttributes: new { @class = "form-label" })
                                            @Html.EditorFor(model => model.StockQuantity, new { htmlAttributes = new { @class = "form-control", placeholder = "Enter stock quantity" } })
                                            @Html.ValidationMessageFor(model => model.StockQuantity, "", new { @class = "invalid-feedback d-block" })
                                        </div>

                                        <div class="row">
                                            <div class="col-6">
                                                <div class="form-check form-switch mb-3">
                                                    @Html.CheckBoxFor(model => model.IsAvailable, new { @class = "form-check-input" })
                                                    @Html.LabelFor(model => model.IsAvailable, htmlAttributes: new { @class = "form-check-label" })
                                                </div>
                                            </div>
                                            <div class="col-6">
                                                <div class="form-check form-switch mb-3">
                                                    @Html.CheckBoxFor(model => model.IsFeatured, new { @class = "form-check-input" })
                                                    @Html.LabelFor(model => model.IsFeatured, htmlAttributes: new { @class = "form-check-label" })
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                <!-- Cover Image -->
                                <div class="card mb-4">
                                    <div class="card-header">
                                        <h5 class="mb-0">
                                            <i class="fas fa-image me-2"></i>Cover Image
                                        </h5>
                                    </div>
                                    <div class="card-body text-center">
                                        <div class="mb-3">
                                            <img id="coverPreview" src="@(string.IsNullOrEmpty(Model.CoverImageUrl) ? "https://via.placeholder.com/200x300?text=Book+Cover" : Model.CoverImageUrl)" alt="Cover Preview" class="img-thumbnail" style="max-width: 200px; max-height: 300px;">
                                        </div>
                                        <div class="mb-3">
                                            <input type="file" class="form-control" id="coverImageFile" name="coverImageFile" accept="image/*">
                                            <small class="text-muted">Recommended: 400x600px, max 2MB</small>
                                        </div>
                                        @Html.HiddenFor(model => model.CoverImageUrl)
                                    </div>
                                </div>

                                <!-- Book Stats -->
                                <div class="card mb-4">
                                    <div class="card-header">
                                        <h5 class="mb-0">
                                            <i class="fas fa-chart-bar me-2"></i>Book Statistics
                                        </h5>
                                    </div>
                                    <div class="card-body">
                                        <div class="mb-2">
                                            <small class="text-muted">Created:</small>
                                            <div>@Model.CreatedDate.ToString("yyyy-MM-dd HH:mm")</div>
                                        </div>
                                        @if (Model.LastUpdatedDate.HasValue)
                                        {
                                            <div class="mb-2">
                                                <small class="text-muted">Last Updated:</small>
                                                <div>@Model.LastUpdatedDate.Value.ToString("yyyy-MM-dd HH:mm")</div>
                                            </div>
                                        }
                                        <div class="mb-2">
                                            <small class="text-muted">Book ID:</small>
                                            <div>@Model.BookId</div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Action Buttons -->
                        <div class="row">
                            <div class="col-12">
                                <div class="card">
                                    <div class="card-body">
                                        <div class="d-flex justify-content-between">
                                            <div>
                                                <a href="@Url.Action("BookList", "Books")" class="btn btn-secondary me-2">
                                                    <i class="fas fa-times me-1"></i>Cancel
                                                </a>
                                                <a href="@Url.Action("DeleteBook", "Books", new { id = Model.BookId })" class="btn btn-danger" onclick="return confirm('Are you sure you want to delete this book?');">
                                                    <i class="fas fa-trash me-1"></i>Delete
                                                </a>
                                            </div>
                                            <button type="submit" class="btn btn-warning">
                                                <i class="fas fa-save me-1"></i>Update Book
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@section Styles {
    <style>
        .card-header {
            background-color: #f8f9fa;
            border-bottom: 1px solid #dee2e6;
        }
        
        .card-header.bg-warning {
            background: linear-gradient(135deg, #ffc107, #ffca2c) !important;
        }
        
        .form-control:focus,
        .form-select:focus {
            border-color: #ffc107;
            box-shadow: 0 0 0 0.25rem rgba(255, 193, 7, 0.25);
        }
        
        .input-group-text {
            background-color: #e9ecef;
            border: 1px solid #ced4da;
        }
        
        .form-check-input:checked {
            background-color: #ffc107;
            border-color: #ffc107;
        }
        
        .img-thumbnail {
            border: 2px solid #dee2e6;
            transition: border-color 0.3s ease;
        }
        
        .img-thumbnail:hover {
            border-color: #ffc107;
        }
        
        .btn {
            transition: all 0.3s ease;
        }
        
        .btn:hover {
            transform: translateY(-1px);
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        }
        
        .btn-warning {
            background: linear-gradient(135deg, #ffc107, #ffca2c);
            border: none;
            color: #212529;
        }
        
        .btn-warning:hover {
            background: linear-gradient(135deg, #ffca2c, #ffd54f);
            color: #212529;
        }
        
        .invalid-feedback {
            display: block;
            font-size: 0.875rem;
            margin-top: 0.25rem;
        }
        
        .needs-validation .form-control:invalid,
        .needs-validation .form-select:invalid {
            border-color: #dc3545;
        }
        
        .needs-validation .form-control:valid,
        .needs-validation .form-select:valid {
            border-color: #198754;
        }
        
        .text-muted {
            color: #6c757d !important;
        }
    </style>
}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script>
        $(document).ready(function() {
            // Auto-hide validation summary after 5 seconds
            setTimeout(function() {
                $(".alert-dismissible").fadeOut("slow");
            }, 5000);

            // Cover image preview
            $('#coverImageFile').on('change', function(e) {
                const file = e.target.files[0];
                if (file && file.type.startsWith('image/')) {
                    const reader = new FileReader();
                    reader.onload = function(e) {
                        $('#coverPreview').attr('src', e.target.result);
                        $('#CoverImageUrl').val(e.target.result);
                    };
                    reader.readAsDataURL(file);
                }
            });

            // Form validation enhancement
            $('#editBookForm').on('submit', function(e) {
                if (!this.checkValidity()) {
                    e.preventDefault();
                    e.stopPropagation();
                }
                $(this).addClass('was-validated');
            });

            // Price formatting
            $('#Price').on('blur', function() {
                let value = $(this).val();
                if (value && !isNaN(value)) {
                    $(this).val(parseFloat(value).toFixed(2));
                }
            });

            // Stock quantity validation
            $('#StockQuantity').on('input', function() {
                let value = $(this).val();
                if (value < 0) {
                    $(this).val(0);
                }
            });

            // ISBN validation (basic format check)
            $('#ISBN').on('blur', function() {
                const isbn = $(this).val().replace(/[-\s]/g, '');
                if (isbn && (isbn.length !== 10 && isbn.length !== 13)) {
                    $(this).addClass('is-invalid');
                } else {
                    $(this).removeClass('is-invalid');
                }
            });

            // Set LastUpdatedDate before form submission
            $('#editBookForm').on('submit', function() {
                // This will be handled by the controller, but we can add a hidden field if needed
            });
        });
    </script>
}