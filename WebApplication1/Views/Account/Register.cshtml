@model WebApplication1.ViewModels.RegisterViewModel
@{
    ViewBag.Title = "Register - Connect2us";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="container py-5">
    <div class="row justify-content-center">
        <div class="col-md-8 col-lg-6">
            <div class="card shadow-lg border-0 rounded-3">
                <div class="card-body p-5">
                    <div class="text-center mb-4">
                        <div class="mb-3">
                            <i class="fas fa-user-plus fa-3x text-primary"></i>
                        </div>
                        <h2 class="fw-bold text-dark">Create Your Account</h2>
                        <p class="text-muted">Join Connect2us - Your premier platform</p>
                    </div>

                    @using (Html.BeginForm("Register", "Account", FormMethod.Post, new { @class = "needs-validation", novalidate = "novalidate", enctype = "multipart/form-data" }))
                    {
                        @Html.AntiForgeryToken()
                        
                        @Html.ValidationSummary(true, "", new { @class = "alert alert-danger alert-dismissible fade show" })

                        <div class="row">
                            <div class="col-md-6 mb-3">
                                @Html.LabelFor(m => m.FirstName, new { @class = "form-label fw-semibold" })
                                @Html.TextBoxFor(m => m.FirstName, new { @class = "form-control form-control-lg", placeholder = "First name", required = "required" })
                                @Html.ValidationMessageFor(m => m.FirstName, "", new { @class = "invalid-feedback d-block" })
                            </div>
                            
                            <div class="col-md-6 mb-3">
                                @Html.LabelFor(m => m.LastName, new { @class = "form-label fw-semibold" })
                                @Html.TextBoxFor(m => m.LastName, new { @class = "form-control form-control-lg", placeholder = "Last name", required = "required" })
                                @Html.ValidationMessageFor(m => m.LastName, "", new { @class = "invalid-feedback d-block" })
                            </div>
                        </div>

                        <div class="mb-3">
                            @Html.LabelFor(m => m.Email, new { @class = "form-label fw-semibold" })
                            @Html.TextBoxFor(m => m.Email, new { @class = "form-control form-control-lg", placeholder = "Enter your email", required = "required" })
                            @Html.ValidationMessageFor(m => m.Email, "", new { @class = "invalid-feedback d-block" })
                        </div>

                        <div class="row">
                            <div class="col-md-6 mb-3">
                                @Html.LabelFor(m => m.Password, new { @class = "form-label fw-semibold" })
                                <div class="input-group">
                                    @Html.PasswordFor(m => m.Password, new { @class = "form-control form-control-lg", placeholder = "Password", required = "required", id = "passwordField" })
                                    <button class="btn btn-outline-secondary" type="button" id="togglePassword">
                                        <i class="fas fa-eye"></i>
                                    </button>
                                </div>
                                @Html.ValidationMessageFor(m => m.Password, "", new { @class = "invalid-feedback d-block" })
                                <div class="password-strength mt-1" id="passwordStrength"></div>
                            </div>
                            
                            <div class="col-md-6 mb-3">
                                @Html.LabelFor(m => m.ConfirmPassword, new { @class = "form-label fw-semibold" })
                                <div class="input-group">
                                    @Html.PasswordFor(m => m.ConfirmPassword, new { @class = "form-control form-control-lg", placeholder = "Confirm password", required = "required", id = "confirmPasswordField" })
                                    <button class="btn btn-outline-secondary" type="button" id="toggleConfirmPassword">
                                        <i class="fas fa-eye"></i>
                                    </button>
                                </div>
                                @Html.ValidationMessageFor(m => m.ConfirmPassword, "", new { @class = "invalid-feedback d-block" })
                            </div>
                        </div>

                        <div class="mb-4">
                            @Html.LabelFor(m => m.Role, new { @class = "form-label fw-semibold" })
                            @Html.DropDownListFor(m => m.Role, new SelectList(new[] 
                            { 
                                new { Value = "Customer", Text = "Customer - Browse and purchase books" },
                                new { Value = "Seller", Text = "Seller - Sell your books" },
                                new { Value = "Employee", Text = "Employee - Manage bookstore operations" }
                            }, "Value", "Text"), "Select your role", new { @class = "form-select form-select-lg", required = "required" })
                            @Html.ValidationMessageFor(m => m.Role, "", new { @class = "invalid-feedback d-block" })
                        </div>

                        <div class="mb-4 form-check">
                            @Html.CheckBoxFor(m => m.AcceptTerms, new { @class = "form-check-input", required = "required" })
                            @Html.LabelFor(m => m.AcceptTerms, new { @class = "form-check-label" })
                            <small class="text-muted d-block mt-1">
                                By creating an account, you agree to our 
                                <a href="@Url.Action("Terms", "Home")" target="_blank" class="text-decoration-none">Terms of Service</a> and 
                                <a href="@Url.Action("Privacy", "Home")" target="_blank" class="text-decoration-none">Privacy Policy</a>
                            </small>
                            @Html.ValidationMessageFor(m => m.AcceptTerms, "", new { @class = "invalid-feedback d-block" })
                        </div>

                        <div class="d-grid mb-4">
                            <button type="submit" class="btn btn-primary btn-lg fw-semibold">
                                <i class="fas fa-user-plus me-2"></i>Create Account
                            </button>
                        </div>

                        <div class="text-center">
                            <p class="mb-0">
                                Already have an account? 
                                <a href="@Url.Action("Login", "Account")" class="text-decoration-none text-primary fw-semibold">Sign in here</a>
                            </p>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@section Styles {
    <style>
        .card {
            background: linear-gradient(135deg, #ffffff 0%, #f8f9fa 100%);
        }
        
        .form-control:focus, .form-select:focus {
            border-color: #0d6efd;
            box-shadow: 0 0 0 0.2rem rgba(13, 110, 253, 0.25);
        }
        
        .btn-primary {
            background: linear-gradient(135deg, #0d6efd 0%, #0b5ed7 100%);
            border: none;
            transition: all 0.3s ease;
        }
        
        .btn-primary:hover {
            transform: translateY(-1px);
            box-shadow: 0 4px 15px rgba(13, 110, 253, 0.3);
        }
        
        .invalid-feedback {
            font-size: 0.875rem;
            margin-top: 0.25rem;
        }
        
        .alert {
            border-radius: 0.5rem;
        }
        
        .password-strength {
            height: 4px;
            background-color: #e9ecef;
            border-radius: 2px;
            overflow: hidden;
        }
        
        .password-strength-bar {
            height: 100%;
            transition: width 0.3s ease;
        }
        
        .strength-weak { background-color: #dc3545; }
        .strength-fair { background-color: #ffc107; }
        .strength-good { background-color: #fd7e14; }
        .strength-strong { background-color: #28a745; }
    </style>
}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script>
        $(document).ready(function() {
            // Toggle password visibility
            $('#togglePassword').click(function() {
                const passwordField = $('#passwordField');
                const fieldType = passwordField.attr('type');
                const toggleIcon = $(this).find('i');
                
                if (fieldType === 'password') {
                    passwordField.attr('type', 'text');
                    toggleIcon.removeClass('fa-eye').addClass('fa-eye-slash');
                } else {
                    passwordField.attr('type', 'password');
                    toggleIcon.removeClass('fa-eye-slash').addClass('fa-eye');
                }
            });
            
            // Toggle confirm password visibility
            $('#toggleConfirmPassword').click(function() {
                const confirmPasswordField = $('#confirmPasswordField');
                const fieldType = confirmPasswordField.attr('type');
                const toggleIcon = $(this).find('i');
                
                if (fieldType === 'password') {
                    confirmPasswordField.attr('type', 'text');
                    toggleIcon.removeClass('fa-eye').addClass('fa-eye-slash');
                } else {
                    confirmPasswordField.attr('type', 'password');
                    toggleIcon.removeClass('fa-eye-slash').addClass('fa-eye');
                }
            });
            
            // Password strength indicator
            $('#passwordField').on('input', function() {
                const password = $(this).val();
                const strength = calculatePasswordStrength(password);
                updatePasswordStrength(strength);
            });
            
            // Add input validation styling
            $('.form-control, .form-select').on('input change', function() {
                if ($(this).val()) {
                    $(this).addClass('is-valid').removeClass('is-invalid');
                } else {
                    $(this).removeClass('is-valid').addClass('is-invalid');
                }
            });
            
            // Auto-hide validation summary after 5 seconds
            setTimeout(function() {
                $('.alert-danger').fadeOut('slow');
            }, 5000);
            
            function calculatePasswordStrength(password) {
                let strength = 0;
                
                if (password.length >= 8) strength++;
                if (password.match(/[a-z]+/)) strength++;
                if (password.match(/[A-Z]+/)) strength++;
                if (password.match(/[0-9]+/)) strength++;
                @Html.Raw("if (password.indexOf('$') !== -1 || password.indexOf('@') !== -1 || password.indexOf('#') !== -1 || password.indexOf('&') !== -1 || password.indexOf('!') !== -1) strength++;")
                
                return strength;
            }
            
            function updatePasswordStrength(strength) {
                const strengthBar = $('#passwordStrength');
                strengthBar.empty();
                
                if (strength > 0) {
                    const strengthClass = strength <= 2 ? 'strength-weak' : 
                                        strength === 3 ? 'strength-fair' : 
                                        strength === 4 ? 'strength-good' : 'strength-strong';
                    
                    const bar = $('<div>')
                        .addClass('password-strength-bar ' + strengthClass)
                        .css('width', (strength * 20) + '%');
                    
                    strengthBar.append(bar);
                }
            }
        });
    </script>
}