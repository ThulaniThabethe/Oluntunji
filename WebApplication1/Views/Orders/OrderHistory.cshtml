@model List<WebApplication1.Models.Order>
@{
    ViewBag.Title = "Order History";
}

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h2>My Order History</h2>
                <div>
                    @Html.ActionLink("Current Orders", "Index", null, new { @class = "btn btn-primary" })
                </div>
            </div>

            @if (Model != null && Model.Any())
            {
                <div class="row mb-4">
                    <div class="col-md-3">
                        <div class="card text-white bg-primary">
                            <div class="card-body">
                                <h6 class="card-title">Total Orders</h6>
                                <h4>@Model.Count</h4>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="card text-white bg-success">
                            <div class="card-body">
                                <h6 class="card-title">Delivered</h6>
                                <h4>@Model.Count(o => o.OrderStatus == "Delivered")</h4>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="card text-white bg-warning">
                            <div class="card-body">
                                <h6 class="card-title">In Progress</h6>
                                <h4>@Model.Count(o => o.OrderStatus == "Pending" || o.OrderStatus == "Confirmed" || o.OrderStatus == "Shipped")</h4>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="card text-white bg-danger">
                            <div class="card-body">
                                <h6 class="card-title">Cancelled</h6>
                                <h4>@Model.Count(o => o.OrderStatus == "Cancelled")</h4>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="row mb-3">
                    <div class="col-md-12">
                        <div class="card">
                            <div class="card-body">
                                <div class="row">
                                    <div class="col-md-4">
                                        <label for="statusFilter" class="form-label">Filter by Status:</label>
                                        <select class="form-select" id="statusFilter">
                                            <option value="">All Orders</option>
                                            <option value="Pending">Pending</option>
                                            <option value="Confirmed">Confirmed</option>
                                            <option value="Shipped">Shipped</option>
                                            <option value="Delivered">Delivered</option>
                                            <option value="Cancelled">Cancelled</option>
                                        </select>
                                    </div>
                                    <div class="col-md-4">
                                        <label for="dateFrom" class="form-label">From Date:</label>
                                        <input type="date" class="form-control" id="dateFrom">
                                    </div>
                                    <div class="col-md-4">
                                        <label for="dateTo" class="form-label">To Date:</label>
                                        <input type="date" class="form-control" id="dateTo">
                                    </div>
                                </div>
                                <div class="row mt-3">
                                    <div class="col-md-12">
                                        <button type="button" class="btn btn-secondary" onclick="filterOrders()">Apply Filter</button>
                                        <button type="button" class="btn btn-outline-secondary" onclick="clearFilters()">Clear Filters</button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="table-responsive">
                    <table class="table table-striped table-hover" id="orderHistoryTable">
                        <thead class="table-dark">
                            <tr>
                                <th>Order ID</th>
                                <th>Date</th>
                                <th>Total Amount</th>
                                <th>Status</th>
                                <th>Payment Status</th>
                                <th>Items</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var order in Model)
                            {
                                <tr data-status="@order.OrderStatus" data-date="@order.OrderDate.ToString("yyyy-MM-dd")">
                                    <td>
                                        <strong>@order.OrderId</strong>
                                    </td>
                                    <td>
                                        @order.OrderDate.ToString("yyyy-MM-dd HH:mm")
                                    </td>
                                    <td>
                                        <strong>@order.TotalAmount.ToString("C")</strong>
                                    </td>
                                    <td>
                                        @{
                                            string statusClass;
                                            switch (order.OrderStatus)
                                            {
                                                case "Pending":
                                                    statusClass = "badge bg-warning text-dark";
                                                    break;
                                                case "Confirmed":
                                                    statusClass = "badge bg-info";
                                                    break;
                                                case "Shipped":
                                                    statusClass = "badge bg-primary";
                                                    break;
                                                case "Delivered":
                                                    statusClass = "badge bg-success";
                                                    break;
                                                case "Cancelled":
                                                    statusClass = "badge bg-danger";
                                                    break;
                                                default:
                                                    statusClass = "badge bg-secondary";
                                                    break;
                                            }
                                        }
                                        <span class="@statusClass">@order.OrderStatus</span>
                                    </td>
                                    <td>
                                        @{
                                            string paymentStatusClass;
                                            switch (order.PaymentStatus)
                                            {
                                                case "Pending":
                                                    paymentStatusClass = "badge bg-warning text-dark";
                                                    break;
                                                case "Paid":
                                                    paymentStatusClass = "badge bg-success";
                                                    break;
                                                case "Failed":
                                                    paymentStatusClass = "badge bg-danger";
                                                    break;
                                                case "Refunded":
                                                    paymentStatusClass = "badge bg-secondary";
                                                    break;
                                                default:
                                                    paymentStatusClass = "badge bg-secondary";
                                                    break;
                                            }
                                        }
                                        <span class="@paymentStatusClass">@order.PaymentStatus</span>
                                    </td>
                                    <td>
                                        @if (order.OrderItems != null && order.OrderItems.Any())
                                        {
                                            <span>@order.OrderItems.Count item(s)</span>
                                        }
                                        else
                                        {
                                            <span class="text-muted">No items</span>
                                        }
                                    </td>
                                    <td>
                                        <div class="btn-group btn-group-sm">
                                            @Html.ActionLink("View Details", "Details", new { id = order.OrderId }, new { @class = "btn btn-outline-primary btn-sm" })
                                            
                                            @if (order.OrderStatus == "Delivered")
                                            {
                                                @Html.ActionLink("Reorder", "Reorder", new { orderId = order.OrderId }, new { @class = "btn btn-outline-success btn-sm" })
                                            }
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
            else
            {
                <div class="alert alert-info" role="alert">
                    <h4 class="alert-heading">No Order History</h4>
                    <p>You haven't placed any orders yet.</p>
                    <hr>
                    <p class="mb-0">
                        @Html.ActionLink("Browse Books", "Index", "Home", null, new { @class = "btn btn-primary" })
                    </p>
                </div>
            }
        </div>
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function() {
            var table = $('#orderHistoryTable').DataTable({
                order: [[1, 'desc']], // Sort by date descending
                pageLength: 25
            });

            // Store original data for reset
            var originalData = table.rows().data().toArray();
        });

        function filterOrders() {
            var statusFilter = $('#statusFilter').val();
            var dateFrom = $('#dateFrom').val();
            var dateTo = $('#dateTo').val();

            var table = $('#orderHistoryTable').DataTable();

            // Clear existing filters
            table.search('').columns().search('').draw();

            // Apply status filter
            if (statusFilter) {
                table.column(3).search(statusFilter).draw();
            }

            // Apply date range filter
            if (dateFrom || dateTo) {
                $.fn.dataTable.ext.search.push(
                    function(settings, data, dataIndex) {
                        var orderDate = new Date(data[1].split(' ')[0]); // Extract date from datetime
                        var fromDate = dateFrom ? new Date(dateFrom) : null;
                        var toDate = dateTo ? new Date(dateTo) : null;

                        if (fromDate && orderDate < fromDate) return false;
                        if (toDate && orderDate > toDate) return false;
                        return true;
                    }
                );
                table.draw();
            }
        }

        function clearFilters() {
            $('#statusFilter').val('');
            $('#dateFrom').val('');
            $('#dateTo').val('');

            var table = $('#orderHistoryTable').DataTable();
            table.search('').columns().search('').draw();
            
            // Remove custom search function
            $.fn.dataTable.ext.search.pop();
            table.draw();
        }
    </script>
}