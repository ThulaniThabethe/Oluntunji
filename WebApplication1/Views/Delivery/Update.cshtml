@model WebApplication1.ViewModels.DeliveryUpdateViewModel
@{
    ViewBag.Title = "Update Delivery Status";
}

<div class="container mt-4">
    <div class="row">
        <div class="col-md-8 offset-md-2">
            <h2>@ViewBag.Title</h2>
            
            <!-- Navigation -->
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item">@Html.ActionLink("Delivery Management", "Index")</li>
                    <li class="breadcrumb-item active">Update Delivery</li>
                </ol>
            </nav>

            <!-- Success/Error Messages -->
            @if (TempData["SuccessMessage"] != null)
            {
                <div class="alert alert-success">
                    @TempData["SuccessMessage"]
                </div>
            }
            @if (TempData["ErrorMessage"] != null)
            {
                <div class="alert alert-danger">
                    @TempData["ErrorMessage"]
                </div>
            }

            @using (Html.BeginForm())
            {
                @Html.AntiForgeryToken()
                @Html.HiddenFor(model => model.OrderId)

                <div class="card">
                    <div class="card-header bg-warning text-dark">
                        <h5 class="mb-0">Delivery Status Update</h5>
                    </div>
                    <div class="card-body">
                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                        <div class="form-group row">
                            @Html.LabelFor(model => model.TrackingNumber, htmlAttributes: new { @class = "col-sm-3 col-form-label" })
                            <div class="col-sm-9">
                                @Html.EditorFor(model => model.TrackingNumber, new { htmlAttributes = new { @class = "form-control", placeholder = "Enter tracking number" } })
                                @Html.ValidationMessageFor(model => model.TrackingNumber, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group row">
                            @Html.LabelFor(model => model.ShippedDate, htmlAttributes: new { @class = "col-sm-3 col-form-label" })
                            <div class="col-sm-9">
                                @Html.EditorFor(model => model.ShippedDate, new { htmlAttributes = new { @class = "form-control", type = "datetime-local" } })
                                @Html.ValidationMessageFor(model => model.ShippedDate, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group row">
                            @Html.LabelFor(model => model.DeliveredDate, htmlAttributes: new { @class = "col-sm-3 col-form-label" })
                            <div class="col-sm-9">
                                @Html.EditorFor(model => model.DeliveredDate, new { htmlAttributes = new { @class = "form-control", type = "datetime-local" } })
                                @Html.ValidationMessageFor(model => model.DeliveredDate, "", new { @class = "text-danger" })
                                <small class="form-text text-muted">Leave empty if not yet delivered</small>
                            </div>
                        </div>

                        <div class="form-group row">
                            @Html.LabelFor(model => model.DeliveryNotes, htmlAttributes: new { @class = "col-sm-3 col-form-label" })
                            <div class="col-sm-9">
                                @Html.TextAreaFor(model => model.DeliveryNotes, new { @class = "form-control", rows = "4", placeholder = "Enter any delivery notes or special instructions" })
                                @Html.ValidationMessageFor(model => model.DeliveryNotes, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group row">
                            <div class="col-sm-9 offset-sm-3">
                                <div class="form-check">
                                    @Html.CheckBoxFor(model => model.MarkAsDelivered, new { @class = "form-check-input" })
                                    @Html.LabelFor(model => model.MarkAsDelivered, htmlAttributes: new { @class = "form-check-label" })
                                    <small class="form-text text-muted">Check this to automatically mark the order as delivered</small>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="card-footer">
                        <div class="row">
                            <div class="col-sm-9 offset-sm-3">
                                <button type="submit" class="btn btn-warning">Update Delivery Status</button>
                                @Html.ActionLink("Cancel", "Index", null, new { @class = "btn btn-secondary ml-2" })
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    
    <script>
        $(document).ready(function() {
            // Auto-check MarkAsDelivered if DeliveredDate is set
            $('#DeliveredDate').change(function() {
                if ($(this).val()) {
                    $('#MarkAsDelivered').prop('checked', true);
                }
            });

            // Auto-set current date/time for ShippedDate if empty
            $('#ShippedDate').focus(function() {
                if (!$(this).val()) {
                    var now = new Date();
                    var formatted = now.toISOString().slice(0, 16);
                    $(this).val(formatted);
                }
            });

            // Auto-set current date/time for DeliveredDate if MarkAsDelivered is checked
            $('#MarkAsDelivered').change(function() {
                if ($(this).is(':checked') && !$('#DeliveredDate').val()) {
                    var now = new Date();
                    var formatted = now.toISOString().slice(0, 16);
                    $('#DeliveredDate').val(formatted);
                }
            });
        });
    </script>
}

<style>
    .card {
        box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);
        border: 1px solid rgba(0, 0, 0, 0.125);
    }
    
    .card-header {
        font-weight: 600;
        letter-spacing: 0.5px;
    }
    
    .form-control {
        border-radius: 0.375rem;
    }
    
    .btn {
        border-radius: 0.375rem;
        padding: 0.5rem 1.25rem;
    }
    
    .form-group.row {
        margin-bottom: 1.25rem;
    }
    
    .col-form-label {
        font-weight: 600;
        color: #495057;
    }
</style>